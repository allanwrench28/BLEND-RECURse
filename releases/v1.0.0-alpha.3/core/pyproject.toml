[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fantom"
version = "0.1.0-alpha"
description = "Revolutionary AI-Powered 3D Printing Platform with Ghost Collective"
authors = [
    {name = "FANTOM Development Team", email = "contact@fantom-ai.dev"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
keywords = ["3d-printing", "ai", "slicer", "ghost-collective", "ethical-ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Manufacturing",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "PyQt5>=5.15.0",
    "trimesh>=3.15.0",
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "Pillow>=9.0.0",
    "opencv-python>=4.5.0",
    "PyYAML>=6.0",
    "requests>=2.28.0",
    "urllib3>=1.26.0",
    "psutil>=5.9.0",
    "click>=8.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-qt>=4.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "flake8-docstrings>=1.7.0",
    "flake8-import-order>=0.18.0",
    "flake8-bugbear>=23.0.0",
    "flake8-comprehensions>=3.14.0",
    "flake8-security>=1.7.0",
    "mypy>=1.5.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "pre-commit>=3.3.0",
    "pydocstyle>=6.3.0",
]
ai = [
    "scikit-learn>=1.3.0",
    "torch>=2.0.0",
    "transformers>=4.30.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-qt>=4.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.11.0",
    "coverage>=7.0.0",
]

[project.urls]
Homepage = "https://github.com/allanwrench28/Clockwork"
Documentation = "https://github.com/allanwrench28/Clockwork/docs"
Repository = "https://github.com/allanwrench28/Clockwork"
"Bug Tracker" = "https://github.com/allanwrench28/Clockwork/issues"
Changelog = "https://github.com/allanwrench28/Clockwork/blob/main/CHANGELOG.md"

[project.scripts]
fantom = "fantom:main"
fantom-gui = "launch_gui:main"
fantom-console = "fantom:console_mode"

# Tool Configuration Section

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | ghost_activity\.log
  | logs/
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
skip_glob = ["ghost_activity.log", "logs/*.log"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".tox",
    "ghost_activity.log",
    "logs/",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101",  # Allow assert in tests
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "trimesh.*",
    "cv2.*",
    "PyQt5.*",
    "numpy.*",
    "scipy.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "ai: marks tests that require AI components",
    "ghost: marks tests for Ghost collective functionality",
    "gui: marks tests that require GUI components",
    "network: marks tests that require network access",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
    "*/ghost_activity.log",
    "*/logs/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "# Ghost collective placeholder",
    "# AI-generated code",
]

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]  # Allow assert in tests and shell execution in specific contexts

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

[tool.pydocstyle]
convention = "google"
inherit = false
ignore = ["D100", "D104", "D105", "D107"]
match-dir = "(?!tests).*"

# Ghost Collective Integration Settings
[tool.ghost-collective]
enabled = true
ethical_review_required = true
ai_safety_checks = true
human_oversight = true
auto_fix_enabled = false  # Require human approval for fixes

[tool.ghost-collective.rules]
max_complexity = 10
max_function_length = 50
max_class_length = 200
require_docstrings = true
require_type_hints = true
security_scan = true
dependency_check = true

[tool.ghost-collective.ai-ethics]
bias_detection = true
fairness_check = true
transparency_required = true
accountability_tracking = true
privacy_protection = true

# AI Safety and Liability Framework
[tool.fantom.disclaimers]
ai_generated_content = "⚠️ AI-generated content - verify before use"
no_liability = "FANTOM assumes no liability for AI-generated code or suggestions"
human_oversight = "Human review and approval required for all AI-generated changes"
experimental_features = "Experimental features - use at your own risk"

[tool.fantom.safety]
gcode_generation_approval = true
hardware_config_approval = true
system_modification_approval = true
external_communication_approval = true
user_data_handling_approval = true